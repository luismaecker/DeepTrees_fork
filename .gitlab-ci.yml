stages:
  - setup
  - test
  - release
  - docs
  - build
  - publish

run_tests:
  image: continuumio/miniconda3:latest
  stage: test
  before_script:
    - apt-get update && apt-get install -y wget curl unzip
    - wget -O polygon-labelling.zip "https://nextcloud.dkrz.de/index.php/s/xdcT8GLikHs4Xps/download"
    - unzip polygon-labelling.zip -d ./polygon-labelling
    - ls -lh ./polygon-labelling  # List contents of extracted folder
    - find ./polygon-labelling  # Recursively list all files and folders
    - conda init bash
    - source ~/.bashrc
    - conda config --add channels conda-forge
    - conda config --set channel_priority strict
    - conda install -n base --override-channels -c conda-forge sqlite -y  # Install SQLite first
    - conda install -n base --override-channels -c conda-forge python -y  # Ensure Python from conda-forge
    - conda run -n base python --version  # Verify Python version
    - conda run -n base which python  # Check Python path
    - conda install -n base --override-channels -c conda-forge gdal=3.9.2
    - conda install -n base --override-channels -c conda-forge numpy -y  # GDAL often depends on numpy
    - conda run -n base python -m pip install --upgrade pip  # Use conda run to upgrade pip
    - conda run -n base pip install -r requirements.txt  # Use conda run to install requirements
    - conda run -n base pip list  # Verify installed packages
    - conda run -n base which python  # Verify Python path

  script:
    - CONFIG_DIR="./config/CD"  # Change this to your desired path
    - conda run -n base which python  # Confirm Python path remains the same
    - conda run -n base python -c "from osgeo import gdal; print('GDAL imported successfully')"         
    - conda run -n base python -m scripts.train --config-dir=${CONFIG_DIR}/train --config-name=train_halle trainer.fast_dev_run=True output_dir=test_suite
    - conda run -n base python -m scripts.train --config-dir=${CONFIG_DIR}/train  --config-name=finetune_halle trainer.fast_dev_run=True data.ground_truth_config.labels=null output_dir=test_suite
    - conda run -n base python -m scripts.test --config-dir=${CONFIG_DIR}/test data.ground_truth_config.labels=null +trainer.fast_dev_run=True output_dir=test_suite
    - conda run -n base python -m deeptrees.inference --config_path=${CONFIG_DIR}/predict/inference_on_individual_tiles.yaml --image_path=./polygon-labelling/pool_tiles/tile_8_15.tif 


  allow_failure: false



semantic-versioning:
  image: node:lts
  stage: release
  variables:
    GITLAB_TOKEN: $GITLAB_TOKEN_SEMANTIC_VERSIONING
  script:
    - npx -y
      -p @semantic-release/commit-analyzer@9.0.2
      -p @semantic-release/git@10.0.1
      -p @semantic-release/gitlab@9.5.0
      -p @semantic-release/release-notes-generator@10.0.3
      -p @semantic-release/exec@6.0.3
      -p @semantic-release/changelog@6.0.2
      -p conventional-changelog-conventionalcommits@5.0.0
      -p semantic-release@19.0.5
      semantic-release
  only:
    - main
  dependencies:
    - run_tests

pages:
  image: python:3.10
  stage: docs
  before_script:
    - python -m pip install --upgrade pip
    - pip3 install sphinx sphinx-rtd-theme sphinx_autodoc_typehints
  script:
    - sphinx-apidoc -o docs/source deeptrees
    - sphinx-autogen docs/source/*.rst
    - sphinx-build -b html docs/source public
  artifacts:
    paths:
      - public/
  only:
    - main
  dependencies:
    - run_tests

build-package:
  image: python:3.10
  stage: build
  before_script:
    - python -m pip install --upgrade pip
    - pip install setuptools wheel
  script:
    - python setup.py sdist bdist_wheel
  artifacts:
    paths:
      - dist/
  only:
    - main
  dependencies:
    - semantic-versioning

publish-package:
  image: python:3.10
  stage: publish
  before_script:
    - python -m pip install --upgrade pip
    - pip install setuptools wheel twine
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  only:
    - tags
  dependencies:
    - build-package


publish-package:
  image: python:3.10
  stage: publish
  before_script:
    - python -m pip install --upgrade pip
    - pip install setuptools wheel twine
  script:
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
  only:
    - main
  dependencies:
    - build-package


